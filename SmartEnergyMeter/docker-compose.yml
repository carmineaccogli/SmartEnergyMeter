version: "3.8" # Version for the docker compose #

# Definition of the Services #
services:

  # Orion is the context broker #
  orion:
    image: fiware/orion:3.7.0 # Loads this image from Docker Hub #
    hostname: orion # Create a hostname to be easier to find the container in the network #
    container_name: fiware-orion  # Create a container name to be easier to get information for it #
    depends_on:
      - mongo-db  # Database for persinting eantity information from orion #
    expose:
      - "1026"  # Expose this port to the network #
    ports:
      - "1026:1026" # match port 1026 on the machine to the one in the container #
    command: -corsOrigin __ALL -dbhost mongo-db -logLevel DEBUG -noCache
    healthcheck:  # check if orion is healthy #
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 10s
    networks:
      - default

  # MongoDB is the database #
  mongo-db:
    image: mongo:4.4  # Loads this image from Docker Hub #
    hostname: mongo-db  # Create a hostname to be easier to find the container in the network #
    container_name: mongodb # Create a container name to be easier to get information for it #
    expose:
      - "27017" # Expose this port to the network #
    environment:
      MONGODB_DATA_DIR: /data/db
      MONGODB_LOG_DIR: /dev/null
    ports:
      - "27017:27017" # match port 27017 on the machine to the one in the container #
    networks:
      - default

   

  # Iot Agent JSON #
  iot-agent:
    image: fiware/iotagent-json:latest  # Loads this image from docker hub #
    hostname: fiware-iot-agent  # Create a hostname to be easier to find the container in the network #
    container_name: fiware-iot-agent  # Create a container name to be easier to get information for it #
    networks:
      - default
    depends_on:
      - mongo-db
    expose:
      - "4041"  # Expose this port to the network #
      - "7896"  # Expose this port to the network #
    ports:
      - "4041:4041" # match port 4041 on the machine to the one in the container #
      - "7896:7896" # match port 7896 on the machine to the one in the container #
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context #
      - IOTA_CB_PORT=1026 # port the context broker listens on to update context #
      - IOTA_NORTH_PORT=4041 # north port of the iot agent #
      - IOTA_REGISTRY_TYPE=mongodb # Whether to hold IoT device info in memory or in a database #
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent #
      - IOTA_DEFAULT_EXPRESSION_LANGUAGE=jexl
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement #
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes #
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings #
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB #
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on #
      - IOTA_MONGO_DB=iotagentjson # The name of the database used in mongoDB #
      - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP #
      - IOTA_PROVIDER_URL=http://iot-agent:4041 # IoT Agent endpoint #
      - IOTA_DEFAULT_RESOURCE=/iot/json


  # Actuator HVAC #
  hvac-actuator: # Build using Flask #
    build: ./src/hvac # Build this image from the ./src/hvac folder #
    hostname: hvac-actuator # Create a hostname to be easier to find the container in the network #
    container_name: hvac-actuator # Create a container name to be easier to get information for it #
    networks:
      - default
    depends_on:
      - orion
      - iot-agent
    volumes:
      - ./hvac-actuator:/code
    expose: 
      - "80"  # Expose this port to the network #
    ports: 
      - "80:80" # match port 80 on the machine to the one in the container #

  # Sensors #
  sensors: # Build using flask #
    build: ./src/sensors # Build this image from the ./src/sensors folder
    hostname: sensors  # Create a hostname to be easier to find the container in the network #
    container_name: sensors  # Create a container name to be easier to get information for it #
    networks:
      - default
    depends_on:
      - orion
      - iot-agent
      - hvac-actuator
    volumes:
      - ./sensors:/code
    ports:
      - "5001:5001" # Match port 5001 from the container to the localhost #

  # Perseo-Core #
  perseo-core:
    image: fiware/perseo-core # Loads this image from docker hub #
    hostname: perseo-core # Create a hostname to be easier to find the container in the network #
    environment:
      - PERSEO_FE_URL=http://perseo-fe:9090 # Perseo-fe endpoint #
      - MAX_AGE=6000
    networks:
      - default
    depends_on:
      - mongo-db
      - sensors
    deploy:
        replicas: 1
        restart_policy:
            condition: on-failure
  
  # Perseo-fe #
  perseo-fe:
    image: fiware/perseo # Loads this image from docker hub #
    hostname: perseo-fe # Create a hostname to be easier to find the container in the network #
    networks:
      - default
    ports:
      - 9090:9090 # Match port 9090 from the container to the localhost #
    depends_on:
      - perseo-core
    environment:
      - PERSEO_MONGO_ENDPOINT=mongo-db # Mongo-db endpoint #
      - PERSEO_CORE_URL=http://perseo-core:8080 # Perseo-core endpoint #
      - PERSEO_LOG_LEVEL=debug
      - PERSEO_ORION_URL=http://orion:1026/ # Orion endpoint #
    deploy:
        replicas: 1
        restart_policy:
            condition: on-failure

  # Dashboard: react app #
  dashboard-react:
    build: ./src/react-docker # Build this image from the ./src/react-docker folder
    hostname: dashboard  # Create a hostname to be easier to find the container in the network #
    container_name: dashboard  # Create a container name to be easier to get information for it #
    networks:
      - default
    depends_on:
      - orion
      - iot-agent
      - hvac-actuator
      - perseo-fe
      - sensors
    volumes:
      - ./dashboard:/code
    ports:
      - "3000:3000" # Match port 3000 from the container to the localhost #

# Definition of the Network #
networks:
  default:
   

    